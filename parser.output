Nonterminals useless in grammar

   translation_unit
   function_definition
   declaration_list_opt
   declaration_list


Terminals unused in grammar

   "+"
   "_"


Rules useless in grammar

   85 translation_unit: function_definition
   86                 | declaration

   87 function_definition: type_specifier declarator '(' declaration_list_opt ')' compound_statement

   88 declaration_list_opt: %empty
   89                     | declaration_list

   90 declaration_list: declaration
   91                 | declaration_list declaration


State 5 conflicts: 9 shift/reduce
State 16 conflicts: 1 shift/reduce
State 19 conflicts: 1 shift/reduce
State 20 conflicts: 2 shift/reduce
State 27 conflicts: 1 reduce/reduce
State 44 conflicts: 1 shift/reduce, 19 reduce/reduce
State 76 conflicts: 1 shift/reduce
State 88 conflicts: 1 shift/reduce
State 89 conflicts: 1 shift/reduce
State 90 conflicts: 2 shift/reduce
State 91 conflicts: 2 shift/reduce
State 92 conflicts: 2 shift/reduce
State 93 conflicts: 2 shift/reduce
State 102 conflicts: 1 shift/reduce
State 108 conflicts: 1 shift/reduce


Grammar

    0 $accept: statement $end

    1 statement: expression

    2 primary_expression: IDENTIFIER
    3                   | CONSTANT
    4                   | STRLIT
    5                   | '(' expression ')'

    6 postfix_expression: primary_expression
    7                   | postfix_expression '[' expression ']'
    8                   | postfix_expression '(' argument_expression_list ')'
    9                   | postfix_expression PTR_OP IDENTIFIER

   10 argument_expression_list: assignment_expression
   11                         | argument_expression_list ',' assignment_expression

   12 unary_expression: postfix_expression
   13                 | unary_operator unary_expression

   14 unary_operator: '&'
   15               | '*'
   16               | '+'
   17               | '-'
   18               | '!'

   19 multiplicative_expression: unary_expression
   20                          | multiplicative_expression '*' unary_expression
   21                          | multiplicative_expression '/' unary_expression
   22                          | multiplicative_expression '%' unary_expression

   23 additive_expression: multiplicative_expression
   24                    | additive_expression '+' multiplicative_expression
   25                    | additive_expression '-' multiplicative_expression

   26 relational_expression: additive_expression
   27                      | relational_expression '<' additive_expression
   28                      | relational_expression '>' additive_expression
   29                      | relational_expression LE_OP additive_expression
   30                      | relational_expression GE_OP additive_expression

   31 equality_expression: relational_expression
   32                    | equality_expression EQ_OP relational_expression
   33                    | equality_expression NE_OP relational_expression

   34 logical_AND_expression: equality_expression
   35                       | logical_AND_expression AND_OP equality_expression

   36 logical_OR_expression: logical_AND_expression
   37                      | logical_OR_expression OR_OP logical_AND_expression

   38 conditional_expression: logical_OR_expression
   39                       | logical_OR_expression '?' expression ':' conditional_expression

   40 assignment_expression: conditional_expression
   41                      | unary_expression '=' assignment_expression

   42 expression: assignment_expression

   43 declaration: type_specifier init_declarator

   44 init_declarator: declarator
   45                | declarator '=' initializer

   46 type_specifier: VOID
   47               | CHAR
   48               | INT

   49 declarator: pointer_opt direct_declarator
   50           | %empty

   51 direct_declarator: %empty
   52                  | IDENTIFIER
   53                  | IDENTIFIER '[' I_CONSTANT ']'
   54                  | IDENTIFIER '(' parameter_list_opt ')'

   55 pointer: '*'

   56 pointer_opt: %empty
   57            | pointer

   58 parameter_list: parameter_declaration
   59               | parameter_list ',' parameter_declaration

   60 parameter_list_opt: %empty
   61                   | parameter_list

   62 identifier_opt: %empty
   63               | IDENTIFIER

   64 parameter_declaration: type_specifier pointer_opt identifier_opt

   65 initializer: assignment_expression

   66 statement: compound_statement
   67          | expression_statement
   68          | selection_statement
   69          | iteration_statement
   70          | jump_statement

   71 compound_statement: '{' block_item_list_opt '}'

   72 block_item_list_opt: %empty
   73                    | block_item_list

   74 block_item_list: block_item
   75                | block_item_list block_item

   76 block_item: declaration
   77           | statement

   78 expression_statement: expression_opt ';'

   79 expression_opt: %empty
   80               | expression

   81 selection_statement: IF '(' expression ')' statement
   82                    | IF '(' expression ')' statement ELSE statement

   83 iteration_statement: FOR '(' expression_opt ';' expression_opt ';' expression_opt ')' statement

   84 jump_statement: RETURN expression_opt


Terminals, with rules where they appear

$end (0) 0
'!' (33) 18
'%' (37) 22
'&' (38) 14
'(' (40) 5 8 54 81 82 83
')' (41) 5 8 54 81 82 83
'*' (42) 15 20 55
'+' (43) 16 24
',' (44) 11 59
'-' (45) 17 25
'/' (47) 21
':' (58) 39
';' (59) 78 83
'<' (60) 27
'=' (61) 41 45
'>' (62) 28
'?' (63) 39
'[' (91) 7 53
']' (93) 7 53
'{' (123) 71
'}' (125) 71
error (256)
IDENTIFIER (258) 2 9 52 53 54 63
CONSTANT (259) 3
I_CONSTANT (260) 53
STRLIT (261) 4
INT (262) 48
CHAR (263) 47
IF (264) 81 82
ELSE (265) 82
VOID (266) 46
RETURN (267) 84
FOR (268) 83
AND_OP (269) 35
OR_OP (270) 37
LE_OP (271) 29
GE_OP (272) 30
EQ_OP (273) 32
NE_OP (274) 33
PTR_OP (275) 9
"+" (276)
"_" (277)


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
statement (44)
    on left: 1 66 67 68 69 70, on right: 0 77 81 82 83
primary_expression (45)
    on left: 2 3 4 5, on right: 6
postfix_expression (46)
    on left: 6 7 8 9, on right: 7 8 9 12
argument_expression_list (47)
    on left: 10 11, on right: 8 11
unary_expression (48)
    on left: 12 13, on right: 13 19 20 21 22 41
unary_operator (49)
    on left: 14 15 16 17 18, on right: 13
multiplicative_expression (50)
    on left: 19 20 21 22, on right: 20 21 22 23 24 25
additive_expression (51)
    on left: 23 24 25, on right: 24 25 26 27 28 29 30
relational_expression (52)
    on left: 26 27 28 29 30, on right: 27 28 29 30 31 32 33
equality_expression (53)
    on left: 31 32 33, on right: 32 33 34 35
logical_AND_expression (54)
    on left: 34 35, on right: 35 36 37
logical_OR_expression (55)
    on left: 36 37, on right: 37 38 39
conditional_expression (56)
    on left: 38 39, on right: 39 40
assignment_expression (57)
    on left: 40 41, on right: 10 11 41 42 65
expression (58)
    on left: 42, on right: 1 5 7 39 80 81 82
declaration (59)
    on left: 43, on right: 76
init_declarator (60)
    on left: 44 45, on right: 43
type_specifier (61)
    on left: 46 47 48, on right: 43 64
declarator (62)
    on left: 49 50, on right: 44 45
direct_declarator (63)
    on left: 51 52 53 54, on right: 49
pointer (64)
    on left: 55, on right: 57
pointer_opt (65)
    on left: 56 57, on right: 49 64
parameter_list (66)
    on left: 58 59, on right: 59 61
parameter_list_opt (67)
    on left: 60 61, on right: 54
identifier_opt (68)
    on left: 62 63, on right: 64
parameter_declaration (69)
    on left: 64, on right: 58 59
initializer (70)
    on left: 65, on right: 45
compound_statement (71)
    on left: 71, on right: 66
block_item_list_opt (72)
    on left: 72 73, on right: 71
block_item_list (73)
    on left: 74 75, on right: 73 75
block_item (74)
    on left: 76 77, on right: 74 75
expression_statement (75)
    on left: 78, on right: 67
expression_opt (76)
    on left: 79 80, on right: 78 83 84
selection_statement (77)
    on left: 81 82, on right: 68
iteration_statement (78)
    on left: 83, on right: 69
jump_statement (79)
    on left: 84, on right: 70


State 0

    0 $accept: . statement $end

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    IF          shift, and go to state 4
    RETURN      shift, and go to state 5
    FOR         shift, and go to state 6
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12
    '{'         shift, and go to state 13

    $default  reduce using rule 79 (expression_opt)

    statement                  go to state 14
    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 27
    compound_statement         go to state 28
    expression_statement       go to state 29
    expression_opt             go to state 30
    selection_statement        go to state 31
    iteration_statement        go to state 32
    jump_statement             go to state 33


State 1

    2 primary_expression: IDENTIFIER .

    $default  reduce using rule 2 (primary_expression)


State 2

    3 primary_expression: CONSTANT .

    $default  reduce using rule 3 (primary_expression)


State 3

    4 primary_expression: STRLIT .

    $default  reduce using rule 4 (primary_expression)


State 4

   81 selection_statement: IF . '(' expression ')' statement
   82                    | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 34


State 5

   84 jump_statement: RETURN . expression_opt

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    IDENTIFIER  [reduce using rule 79 (expression_opt)]
    CONSTANT    [reduce using rule 79 (expression_opt)]
    STRLIT      [reduce using rule 79 (expression_opt)]
    '-'         [reduce using rule 79 (expression_opt)]
    '('         [reduce using rule 79 (expression_opt)]
    '&'         [reduce using rule 79 (expression_opt)]
    '*'         [reduce using rule 79 (expression_opt)]
    '+'         [reduce using rule 79 (expression_opt)]
    '!'         [reduce using rule 79 (expression_opt)]
    $default    reduce using rule 79 (expression_opt)

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 35
    expression_opt             go to state 36


State 6

   83 iteration_statement: FOR . '(' expression_opt ';' expression_opt ';' expression_opt ')' statement

    '('  shift, and go to state 37


State 7

   17 unary_operator: '-' .

    $default  reduce using rule 17 (unary_operator)


State 8

    5 primary_expression: '(' . expression ')'

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 38


State 9

   14 unary_operator: '&' .

    $default  reduce using rule 14 (unary_operator)


State 10

   15 unary_operator: '*' .

    $default  reduce using rule 15 (unary_operator)


State 11

   16 unary_operator: '+' .

    $default  reduce using rule 16 (unary_operator)


State 12

   18 unary_operator: '!' .

    $default  reduce using rule 18 (unary_operator)


State 13

   71 compound_statement: '{' . block_item_list_opt '}'

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    INT         shift, and go to state 39
    CHAR        shift, and go to state 40
    IF          shift, and go to state 4
    VOID        shift, and go to state 41
    RETURN      shift, and go to state 5
    FOR         shift, and go to state 6
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12
    '{'         shift, and go to state 13

    ';'       reduce using rule 79 (expression_opt)
    $default  reduce using rule 72 (block_item_list_opt)

    statement                  go to state 42
    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 27
    declaration                go to state 43
    type_specifier             go to state 44
    compound_statement         go to state 28
    block_item_list_opt        go to state 45
    block_item_list            go to state 46
    block_item                 go to state 47
    expression_statement       go to state 29
    expression_opt             go to state 30
    selection_statement        go to state 31
    iteration_statement        go to state 32
    jump_statement             go to state 33


State 14

    0 $accept: statement . $end

    $end  shift, and go to state 48


State 15

    6 postfix_expression: primary_expression .

    $default  reduce using rule 6 (postfix_expression)


State 16

    7 postfix_expression: postfix_expression . '[' expression ']'
    8                   | postfix_expression . '(' argument_expression_list ')'
    9                   | postfix_expression . PTR_OP IDENTIFIER
   12 unary_expression: postfix_expression .

    PTR_OP  shift, and go to state 49
    '('     shift, and go to state 50
    '['     shift, and go to state 51

    '('       [reduce using rule 12 (unary_expression)]
    $default  reduce using rule 12 (unary_expression)


State 17

   19 multiplicative_expression: unary_expression .
   41 assignment_expression: unary_expression . '=' assignment_expression

    '='  shift, and go to state 52

    $default  reduce using rule 19 (multiplicative_expression)


State 18

   13 unary_expression: unary_operator . unary_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression  go to state 15
    postfix_expression  go to state 16
    unary_expression    go to state 53
    unary_operator      go to state 18


State 19

   20 multiplicative_expression: multiplicative_expression . '*' unary_expression
   21                          | multiplicative_expression . '/' unary_expression
   22                          | multiplicative_expression . '%' unary_expression
   23 additive_expression: multiplicative_expression .

    '*'  shift, and go to state 54
    '/'  shift, and go to state 55
    '%'  shift, and go to state 56

    '*'       [reduce using rule 23 (additive_expression)]
    $default  reduce using rule 23 (additive_expression)


State 20

   24 additive_expression: additive_expression . '+' multiplicative_expression
   25                    | additive_expression . '-' multiplicative_expression
   26 relational_expression: additive_expression .

    '-'  shift, and go to state 57
    '+'  shift, and go to state 58

    '-'       [reduce using rule 26 (relational_expression)]
    '+'       [reduce using rule 26 (relational_expression)]
    $default  reduce using rule 26 (relational_expression)


State 21

   27 relational_expression: relational_expression . '<' additive_expression
   28                      | relational_expression . '>' additive_expression
   29                      | relational_expression . LE_OP additive_expression
   30                      | relational_expression . GE_OP additive_expression
   31 equality_expression: relational_expression .

    LE_OP  shift, and go to state 59
    GE_OP  shift, and go to state 60
    '<'    shift, and go to state 61
    '>'    shift, and go to state 62

    $default  reduce using rule 31 (equality_expression)


State 22

   32 equality_expression: equality_expression . EQ_OP relational_expression
   33                    | equality_expression . NE_OP relational_expression
   34 logical_AND_expression: equality_expression .

    EQ_OP  shift, and go to state 63
    NE_OP  shift, and go to state 64

    $default  reduce using rule 34 (logical_AND_expression)


State 23

   35 logical_AND_expression: logical_AND_expression . AND_OP equality_expression
   36 logical_OR_expression: logical_AND_expression .

    AND_OP  shift, and go to state 65

    $default  reduce using rule 36 (logical_OR_expression)


State 24

   37 logical_OR_expression: logical_OR_expression . OR_OP logical_AND_expression
   38 conditional_expression: logical_OR_expression .
   39                       | logical_OR_expression . '?' expression ':' conditional_expression

    OR_OP  shift, and go to state 66
    '?'    shift, and go to state 67

    $default  reduce using rule 38 (conditional_expression)


State 25

   40 assignment_expression: conditional_expression .

    $default  reduce using rule 40 (assignment_expression)


State 26

   42 expression: assignment_expression .

    $default  reduce using rule 42 (expression)


State 27

    1 statement: expression .
   80 expression_opt: expression .

    ';'       reduce using rule 1 (statement)
    ';'       [reduce using rule 80 (expression_opt)]
    $default  reduce using rule 1 (statement)


State 28

   66 statement: compound_statement .

    $default  reduce using rule 66 (statement)


State 29

   67 statement: expression_statement .

    $default  reduce using rule 67 (statement)


State 30

   78 expression_statement: expression_opt . ';'

    ';'  shift, and go to state 68


State 31

   68 statement: selection_statement .

    $default  reduce using rule 68 (statement)


State 32

   69 statement: iteration_statement .

    $default  reduce using rule 69 (statement)


State 33

   70 statement: jump_statement .

    $default  reduce using rule 70 (statement)


State 34

   81 selection_statement: IF '(' . expression ')' statement
   82                    | IF '(' . expression ')' statement ELSE statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 69


State 35

   80 expression_opt: expression .

    $default  reduce using rule 80 (expression_opt)


State 36

   84 jump_statement: RETURN expression_opt .

    $default  reduce using rule 84 (jump_statement)


State 37

   83 iteration_statement: FOR '(' . expression_opt ';' expression_opt ';' expression_opt ')' statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    $default  reduce using rule 79 (expression_opt)

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 35
    expression_opt             go to state 70


State 38

    5 primary_expression: '(' expression . ')'

    ')'  shift, and go to state 71


State 39

   48 type_specifier: INT .

    $default  reduce using rule 48 (type_specifier)


State 40

   47 type_specifier: CHAR .

    $default  reduce using rule 47 (type_specifier)


State 41

   46 type_specifier: VOID .

    $default  reduce using rule 46 (type_specifier)


State 42

   77 block_item: statement .

    $default  reduce using rule 77 (block_item)


State 43

   76 block_item: declaration .

    $default  reduce using rule 76 (block_item)


State 44

   43 declaration: type_specifier . init_declarator

    '*'  shift, and go to state 72

    IDENTIFIER  reduce using rule 50 (declarator)
    IDENTIFIER  [reduce using rule 56 (pointer_opt)]
    CONSTANT    reduce using rule 50 (declarator)
    CONSTANT    [reduce using rule 56 (pointer_opt)]
    STRLIT      reduce using rule 50 (declarator)
    STRLIT      [reduce using rule 56 (pointer_opt)]
    INT         reduce using rule 50 (declarator)
    INT         [reduce using rule 56 (pointer_opt)]
    CHAR        reduce using rule 50 (declarator)
    CHAR        [reduce using rule 56 (pointer_opt)]
    IF          reduce using rule 50 (declarator)
    IF          [reduce using rule 56 (pointer_opt)]
    VOID        reduce using rule 50 (declarator)
    VOID        [reduce using rule 56 (pointer_opt)]
    RETURN      reduce using rule 50 (declarator)
    RETURN      [reduce using rule 56 (pointer_opt)]
    FOR         reduce using rule 50 (declarator)
    FOR         [reduce using rule 56 (pointer_opt)]
    '-'         reduce using rule 50 (declarator)
    '-'         [reduce using rule 56 (pointer_opt)]
    '('         reduce using rule 50 (declarator)
    '('         [reduce using rule 56 (pointer_opt)]
    '&'         reduce using rule 50 (declarator)
    '&'         [reduce using rule 56 (pointer_opt)]
    '*'         [reduce using rule 50 (declarator)]
    '*'         [reduce using rule 56 (pointer_opt)]
    '+'         reduce using rule 50 (declarator)
    '+'         [reduce using rule 56 (pointer_opt)]
    '!'         reduce using rule 50 (declarator)
    '!'         [reduce using rule 56 (pointer_opt)]
    '='         reduce using rule 50 (declarator)
    '='         [reduce using rule 56 (pointer_opt)]
    '{'         reduce using rule 50 (declarator)
    '{'         [reduce using rule 56 (pointer_opt)]
    '}'         reduce using rule 50 (declarator)
    '}'         [reduce using rule 56 (pointer_opt)]
    ';'         reduce using rule 50 (declarator)
    ';'         [reduce using rule 56 (pointer_opt)]
    $default    reduce using rule 50 (declarator)

    init_declarator  go to state 73
    declarator       go to state 74
    pointer          go to state 75
    pointer_opt      go to state 76


State 45

   71 compound_statement: '{' block_item_list_opt . '}'

    '}'  shift, and go to state 77


State 46

   73 block_item_list_opt: block_item_list .
   75 block_item_list: block_item_list . block_item

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    INT         shift, and go to state 39
    CHAR        shift, and go to state 40
    IF          shift, and go to state 4
    VOID        shift, and go to state 41
    RETURN      shift, and go to state 5
    FOR         shift, and go to state 6
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12
    '{'         shift, and go to state 13

    ';'       reduce using rule 79 (expression_opt)
    $default  reduce using rule 73 (block_item_list_opt)

    statement                  go to state 42
    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 27
    declaration                go to state 43
    type_specifier             go to state 44
    compound_statement         go to state 28
    block_item                 go to state 78
    expression_statement       go to state 29
    expression_opt             go to state 30
    selection_statement        go to state 31
    iteration_statement        go to state 32
    jump_statement             go to state 33


State 47

   74 block_item_list: block_item .

    $default  reduce using rule 74 (block_item_list)


State 48

    0 $accept: statement $end .

    $default  accept


State 49

    9 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 79


State 50

    8 postfix_expression: postfix_expression '(' . argument_expression_list ')'

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    argument_expression_list   go to state 80
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 81


State 51

    7 postfix_expression: postfix_expression '[' . expression ']'

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 82


State 52

   41 assignment_expression: unary_expression '=' . assignment_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 83


State 53

   13 unary_expression: unary_operator unary_expression .

    $default  reduce using rule 13 (unary_expression)


State 54

   20 multiplicative_expression: multiplicative_expression '*' . unary_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression  go to state 15
    postfix_expression  go to state 16
    unary_expression    go to state 84
    unary_operator      go to state 18


State 55

   21 multiplicative_expression: multiplicative_expression '/' . unary_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression  go to state 15
    postfix_expression  go to state 16
    unary_expression    go to state 85
    unary_operator      go to state 18


State 56

   22 multiplicative_expression: multiplicative_expression '%' . unary_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression  go to state 15
    postfix_expression  go to state 16
    unary_expression    go to state 86
    unary_operator      go to state 18


State 57

   25 additive_expression: additive_expression '-' . multiplicative_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 88


State 58

   24 additive_expression: additive_expression '+' . multiplicative_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 89


State 59

   29 relational_expression: relational_expression LE_OP . additive_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 90


State 60

   30 relational_expression: relational_expression GE_OP . additive_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 91


State 61

   27 relational_expression: relational_expression '<' . additive_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 92


State 62

   28 relational_expression: relational_expression '>' . additive_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 93


State 63

   32 equality_expression: equality_expression EQ_OP . relational_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 94


State 64

   33 equality_expression: equality_expression NE_OP . relational_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 95


State 65

   35 logical_AND_expression: logical_AND_expression AND_OP . equality_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 96


State 66

   37 logical_OR_expression: logical_OR_expression OR_OP . logical_AND_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 97


State 67

   39 conditional_expression: logical_OR_expression '?' . expression ':' conditional_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 98


State 68

   78 expression_statement: expression_opt ';' .

    $default  reduce using rule 78 (expression_statement)


State 69

   81 selection_statement: IF '(' expression . ')' statement
   82                    | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 99


State 70

   83 iteration_statement: FOR '(' expression_opt . ';' expression_opt ';' expression_opt ')' statement

    ';'  shift, and go to state 100


State 71

    5 primary_expression: '(' expression ')' .

    $default  reduce using rule 5 (primary_expression)


State 72

   55 pointer: '*' .

    $default  reduce using rule 55 (pointer)


State 73

   43 declaration: type_specifier init_declarator .

    $default  reduce using rule 43 (declaration)


State 74

   44 init_declarator: declarator .
   45                | declarator . '=' initializer

    '='  shift, and go to state 101

    $default  reduce using rule 44 (init_declarator)


State 75

   57 pointer_opt: pointer .

    $default  reduce using rule 57 (pointer_opt)


State 76

   49 declarator: pointer_opt . direct_declarator

    IDENTIFIER  shift, and go to state 102

    IDENTIFIER  [reduce using rule 51 (direct_declarator)]
    $default    reduce using rule 51 (direct_declarator)

    direct_declarator  go to state 103


State 77

   71 compound_statement: '{' block_item_list_opt '}' .

    $default  reduce using rule 71 (compound_statement)


State 78

   75 block_item_list: block_item_list block_item .

    $default  reduce using rule 75 (block_item_list)


State 79

    9 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 9 (postfix_expression)


State 80

    8 postfix_expression: postfix_expression '(' argument_expression_list . ')'
   11 argument_expression_list: argument_expression_list . ',' assignment_expression

    ')'  shift, and go to state 104
    ','  shift, and go to state 105


State 81

   10 argument_expression_list: assignment_expression .

    $default  reduce using rule 10 (argument_expression_list)


State 82

    7 postfix_expression: postfix_expression '[' expression . ']'

    ']'  shift, and go to state 106


State 83

   41 assignment_expression: unary_expression '=' assignment_expression .

    $default  reduce using rule 41 (assignment_expression)


State 84

   20 multiplicative_expression: multiplicative_expression '*' unary_expression .

    $default  reduce using rule 20 (multiplicative_expression)


State 85

   21 multiplicative_expression: multiplicative_expression '/' unary_expression .

    $default  reduce using rule 21 (multiplicative_expression)


State 86

   22 multiplicative_expression: multiplicative_expression '%' unary_expression .

    $default  reduce using rule 22 (multiplicative_expression)


State 87

   19 multiplicative_expression: unary_expression .

    $default  reduce using rule 19 (multiplicative_expression)


State 88

   20 multiplicative_expression: multiplicative_expression . '*' unary_expression
   21                          | multiplicative_expression . '/' unary_expression
   22                          | multiplicative_expression . '%' unary_expression
   25 additive_expression: additive_expression '-' multiplicative_expression .

    '*'  shift, and go to state 54
    '/'  shift, and go to state 55
    '%'  shift, and go to state 56

    '*'       [reduce using rule 25 (additive_expression)]
    $default  reduce using rule 25 (additive_expression)


State 89

   20 multiplicative_expression: multiplicative_expression . '*' unary_expression
   21                          | multiplicative_expression . '/' unary_expression
   22                          | multiplicative_expression . '%' unary_expression
   24 additive_expression: additive_expression '+' multiplicative_expression .

    '*'  shift, and go to state 54
    '/'  shift, and go to state 55
    '%'  shift, and go to state 56

    '*'       [reduce using rule 24 (additive_expression)]
    $default  reduce using rule 24 (additive_expression)


State 90

   24 additive_expression: additive_expression . '+' multiplicative_expression
   25                    | additive_expression . '-' multiplicative_expression
   29 relational_expression: relational_expression LE_OP additive_expression .

    '-'  shift, and go to state 57
    '+'  shift, and go to state 58

    '-'       [reduce using rule 29 (relational_expression)]
    '+'       [reduce using rule 29 (relational_expression)]
    $default  reduce using rule 29 (relational_expression)


State 91

   24 additive_expression: additive_expression . '+' multiplicative_expression
   25                    | additive_expression . '-' multiplicative_expression
   30 relational_expression: relational_expression GE_OP additive_expression .

    '-'  shift, and go to state 57
    '+'  shift, and go to state 58

    '-'       [reduce using rule 30 (relational_expression)]
    '+'       [reduce using rule 30 (relational_expression)]
    $default  reduce using rule 30 (relational_expression)


State 92

   24 additive_expression: additive_expression . '+' multiplicative_expression
   25                    | additive_expression . '-' multiplicative_expression
   27 relational_expression: relational_expression '<' additive_expression .

    '-'  shift, and go to state 57
    '+'  shift, and go to state 58

    '-'       [reduce using rule 27 (relational_expression)]
    '+'       [reduce using rule 27 (relational_expression)]
    $default  reduce using rule 27 (relational_expression)


State 93

   24 additive_expression: additive_expression . '+' multiplicative_expression
   25                    | additive_expression . '-' multiplicative_expression
   28 relational_expression: relational_expression '>' additive_expression .

    '-'  shift, and go to state 57
    '+'  shift, and go to state 58

    '-'       [reduce using rule 28 (relational_expression)]
    '+'       [reduce using rule 28 (relational_expression)]
    $default  reduce using rule 28 (relational_expression)


State 94

   27 relational_expression: relational_expression . '<' additive_expression
   28                      | relational_expression . '>' additive_expression
   29                      | relational_expression . LE_OP additive_expression
   30                      | relational_expression . GE_OP additive_expression
   32 equality_expression: equality_expression EQ_OP relational_expression .

    LE_OP  shift, and go to state 59
    GE_OP  shift, and go to state 60
    '<'    shift, and go to state 61
    '>'    shift, and go to state 62

    $default  reduce using rule 32 (equality_expression)


State 95

   27 relational_expression: relational_expression . '<' additive_expression
   28                      | relational_expression . '>' additive_expression
   29                      | relational_expression . LE_OP additive_expression
   30                      | relational_expression . GE_OP additive_expression
   33 equality_expression: equality_expression NE_OP relational_expression .

    LE_OP  shift, and go to state 59
    GE_OP  shift, and go to state 60
    '<'    shift, and go to state 61
    '>'    shift, and go to state 62

    $default  reduce using rule 33 (equality_expression)


State 96

   32 equality_expression: equality_expression . EQ_OP relational_expression
   33                    | equality_expression . NE_OP relational_expression
   35 logical_AND_expression: logical_AND_expression AND_OP equality_expression .

    EQ_OP  shift, and go to state 63
    NE_OP  shift, and go to state 64

    $default  reduce using rule 35 (logical_AND_expression)


State 97

   35 logical_AND_expression: logical_AND_expression . AND_OP equality_expression
   37 logical_OR_expression: logical_OR_expression OR_OP logical_AND_expression .

    AND_OP  shift, and go to state 65

    $default  reduce using rule 37 (logical_OR_expression)


State 98

   39 conditional_expression: logical_OR_expression '?' expression . ':' conditional_expression

    ':'  shift, and go to state 107


State 99

   81 selection_statement: IF '(' expression ')' . statement
   82                    | IF '(' expression ')' . statement ELSE statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    IF          shift, and go to state 4
    RETURN      shift, and go to state 5
    FOR         shift, and go to state 6
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12
    '{'         shift, and go to state 13

    $default  reduce using rule 79 (expression_opt)

    statement                  go to state 108
    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 27
    compound_statement         go to state 28
    expression_statement       go to state 29
    expression_opt             go to state 30
    selection_statement        go to state 31
    iteration_statement        go to state 32
    jump_statement             go to state 33


State 100

   83 iteration_statement: FOR '(' expression_opt ';' . expression_opt ';' expression_opt ')' statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    $default  reduce using rule 79 (expression_opt)

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 35
    expression_opt             go to state 109


State 101

   45 init_declarator: declarator '=' . initializer

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 110
    initializer                go to state 111


State 102

   52 direct_declarator: IDENTIFIER .
   53                  | IDENTIFIER . '[' I_CONSTANT ']'
   54                  | IDENTIFIER . '(' parameter_list_opt ')'

    '('  shift, and go to state 112
    '['  shift, and go to state 113

    '('       [reduce using rule 52 (direct_declarator)]
    $default  reduce using rule 52 (direct_declarator)


State 103

   49 declarator: pointer_opt direct_declarator .

    $default  reduce using rule 49 (declarator)


State 104

    8 postfix_expression: postfix_expression '(' argument_expression_list ')' .

    $default  reduce using rule 8 (postfix_expression)


State 105

   11 argument_expression_list: argument_expression_list ',' . assignment_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 114


State 106

    7 postfix_expression: postfix_expression '[' expression ']' .

    $default  reduce using rule 7 (postfix_expression)


State 107

   39 conditional_expression: logical_OR_expression '?' expression ':' . conditional_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 87
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 115


State 108

   81 selection_statement: IF '(' expression ')' statement .
   82                    | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 116

    ELSE      [reduce using rule 81 (selection_statement)]
    $default  reduce using rule 81 (selection_statement)


State 109

   83 iteration_statement: FOR '(' expression_opt ';' expression_opt . ';' expression_opt ')' statement

    ';'  shift, and go to state 117


State 110

   65 initializer: assignment_expression .

    $default  reduce using rule 65 (initializer)


State 111

   45 init_declarator: declarator '=' initializer .

    $default  reduce using rule 45 (init_declarator)


State 112

   54 direct_declarator: IDENTIFIER '(' . parameter_list_opt ')'

    INT   shift, and go to state 39
    CHAR  shift, and go to state 40
    VOID  shift, and go to state 41

    $default  reduce using rule 60 (parameter_list_opt)

    type_specifier         go to state 118
    parameter_list         go to state 119
    parameter_list_opt     go to state 120
    parameter_declaration  go to state 121


State 113

   53 direct_declarator: IDENTIFIER '[' . I_CONSTANT ']'

    I_CONSTANT  shift, and go to state 122


State 114

   11 argument_expression_list: argument_expression_list ',' assignment_expression .

    $default  reduce using rule 11 (argument_expression_list)


State 115

   39 conditional_expression: logical_OR_expression '?' expression ':' conditional_expression .

    $default  reduce using rule 39 (conditional_expression)


State 116

   82 selection_statement: IF '(' expression ')' statement ELSE . statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    IF          shift, and go to state 4
    RETURN      shift, and go to state 5
    FOR         shift, and go to state 6
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12
    '{'         shift, and go to state 13

    $default  reduce using rule 79 (expression_opt)

    statement                  go to state 123
    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 27
    compound_statement         go to state 28
    expression_statement       go to state 29
    expression_opt             go to state 30
    selection_statement        go to state 31
    iteration_statement        go to state 32
    jump_statement             go to state 33


State 117

   83 iteration_statement: FOR '(' expression_opt ';' expression_opt ';' . expression_opt ')' statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12

    $default  reduce using rule 79 (expression_opt)

    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 35
    expression_opt             go to state 124


State 118

   64 parameter_declaration: type_specifier . pointer_opt identifier_opt

    '*'  shift, and go to state 72

    $default  reduce using rule 56 (pointer_opt)

    pointer      go to state 75
    pointer_opt  go to state 125


State 119

   59 parameter_list: parameter_list . ',' parameter_declaration
   61 parameter_list_opt: parameter_list .

    ','  shift, and go to state 126

    $default  reduce using rule 61 (parameter_list_opt)


State 120

   54 direct_declarator: IDENTIFIER '(' parameter_list_opt . ')'

    ')'  shift, and go to state 127


State 121

   58 parameter_list: parameter_declaration .

    $default  reduce using rule 58 (parameter_list)


State 122

   53 direct_declarator: IDENTIFIER '[' I_CONSTANT . ']'

    ']'  shift, and go to state 128


State 123

   82 selection_statement: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 82 (selection_statement)


State 124

   83 iteration_statement: FOR '(' expression_opt ';' expression_opt ';' expression_opt . ')' statement

    ')'  shift, and go to state 129


State 125

   64 parameter_declaration: type_specifier pointer_opt . identifier_opt

    IDENTIFIER  shift, and go to state 130

    $default  reduce using rule 62 (identifier_opt)

    identifier_opt  go to state 131


State 126

   59 parameter_list: parameter_list ',' . parameter_declaration

    INT   shift, and go to state 39
    CHAR  shift, and go to state 40
    VOID  shift, and go to state 41

    type_specifier         go to state 118
    parameter_declaration  go to state 132


State 127

   54 direct_declarator: IDENTIFIER '(' parameter_list_opt ')' .

    $default  reduce using rule 54 (direct_declarator)


State 128

   53 direct_declarator: IDENTIFIER '[' I_CONSTANT ']' .

    $default  reduce using rule 53 (direct_declarator)


State 129

   83 iteration_statement: FOR '(' expression_opt ';' expression_opt ';' expression_opt ')' . statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    IF          shift, and go to state 4
    RETURN      shift, and go to state 5
    FOR         shift, and go to state 6
    '-'         shift, and go to state 7
    '('         shift, and go to state 8
    '&'         shift, and go to state 9
    '*'         shift, and go to state 10
    '+'         shift, and go to state 11
    '!'         shift, and go to state 12
    '{'         shift, and go to state 13

    $default  reduce using rule 79 (expression_opt)

    statement                  go to state 133
    primary_expression         go to state 15
    postfix_expression         go to state 16
    unary_expression           go to state 17
    unary_operator             go to state 18
    multiplicative_expression  go to state 19
    additive_expression        go to state 20
    relational_expression      go to state 21
    equality_expression        go to state 22
    logical_AND_expression     go to state 23
    logical_OR_expression      go to state 24
    conditional_expression     go to state 25
    assignment_expression      go to state 26
    expression                 go to state 27
    compound_statement         go to state 28
    expression_statement       go to state 29
    expression_opt             go to state 30
    selection_statement        go to state 31
    iteration_statement        go to state 32
    jump_statement             go to state 33


State 130

   63 identifier_opt: IDENTIFIER .

    $default  reduce using rule 63 (identifier_opt)


State 131

   64 parameter_declaration: type_specifier pointer_opt identifier_opt .

    $default  reduce using rule 64 (parameter_declaration)


State 132

   59 parameter_list: parameter_list ',' parameter_declaration .

    $default  reduce using rule 59 (parameter_list)


State 133

   83 iteration_statement: FOR '(' expression_opt ';' expression_opt ';' expression_opt ')' statement .

    $default  reduce using rule 83 (iteration_statement)
