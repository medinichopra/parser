Useless nonterminals

   translation_unit
   function_definition
   declaration_list_opt
   declaration_list


Terminals which are not used

   '_'


Useless rules

   86 translation_unit: function_definition
   87                 | declaration

   88 function_definition: type_specifier declarator '(' declaration_list_opt ')' compound_statement

   89 declaration_list_opt: /* empty */
   90                     | declaration_list

   91 declaration_list: declaration
   92                 | declaration_list declaration


State 6 conflicts: 10 shift/reduce
State 17 conflicts: 1 shift/reduce
State 20 conflicts: 1 shift/reduce
State 21 conflicts: 2 shift/reduce
State 28 conflicts: 1 reduce/reduce
State 45 conflicts: 20 reduce/reduce
State 77 conflicts: 1 shift/reduce
State 89 conflicts: 1 shift/reduce
State 90 conflicts: 1 shift/reduce
State 91 conflicts: 2 shift/reduce
State 92 conflicts: 2 shift/reduce
State 93 conflicts: 2 shift/reduce
State 94 conflicts: 2 shift/reduce
State 103 conflicts: 1 shift/reduce
State 109 conflicts: 1 shift/reduce


Grammar

    0 $accept: statement $end

    1 statement: expression

    2 primary_expression: IDENTIFIER
    3                   | CONSTANT
    4                   | STRLIT
    5                   | I_CONSTANT
    6                   | '(' expression ')'

    7 postfix_expression: primary_expression
    8                   | postfix_expression '[' expression ']'
    9                   | postfix_expression '(' argument_expression_list ')'
   10                   | postfix_expression PTR_OP IDENTIFIER

   11 argument_expression_list: assignment_expression
   12                         | argument_expression_list ',' assignment_expression

   13 unary_expression: postfix_expression
   14                 | unary_operator unary_expression

   15 unary_operator: '&'
   16               | '*'
   17               | '+'
   18               | '-'
   19               | '!'

   20 multiplicative_expression: unary_expression
   21                          | multiplicative_expression '*' unary_expression
   22                          | multiplicative_expression '/' unary_expression
   23                          | multiplicative_expression '%' unary_expression

   24 additive_expression: multiplicative_expression
   25                    | additive_expression '+' multiplicative_expression
   26                    | additive_expression '-' multiplicative_expression

   27 relational_expression: additive_expression
   28                      | relational_expression '<' additive_expression
   29                      | relational_expression '>' additive_expression
   30                      | relational_expression LE_OP additive_expression
   31                      | relational_expression GE_OP additive_expression

   32 equality_expression: relational_expression
   33                    | equality_expression EQ_OP relational_expression
   34                    | equality_expression NE_OP relational_expression

   35 logical_AND_expression: equality_expression
   36                       | logical_AND_expression AND_OP equality_expression

   37 logical_OR_expression: logical_AND_expression
   38                      | logical_OR_expression OR_OP logical_AND_expression

   39 conditional_expression: logical_OR_expression
   40                       | logical_OR_expression '?' expression ':' conditional_expression

   41 assignment_expression: conditional_expression
   42                      | unary_expression '=' assignment_expression

   43 expression: assignment_expression

   44 declaration: type_specifier init_declarator

   45 init_declarator: declarator
   46                | declarator '=' initializer

   47 type_specifier: VOID
   48               | CHAR
   49               | INT

   50 declarator: pointer_opt direct_declarator
   51           | /* empty */

   52 direct_declarator: /* empty */
   53                  | IDENTIFIER
   54                  | IDENTIFIER '[' I_CONSTANT ']'
   55                  | IDENTIFIER '(' parameter_list_opt ')'

   56 pointer: PTR_OP

   57 pointer_opt: /* empty */
   58            | pointer

   59 parameter_list: parameter_declaration
   60               | parameter_list ',' parameter_declaration

   61 parameter_list_opt: /* empty */
   62                   | parameter_list

   63 identifier_opt: /* empty */
   64               | IDENTIFIER

   65 parameter_declaration: type_specifier pointer_opt identifier_opt

   66 initializer: assignment_expression

   67 statement: compound_statement
   68          | expression_statement
   69          | selection_statement
   70          | iteration_statement
   71          | jump_statement

   72 compound_statement: '{' block_item_list_opt '}'

   73 block_item_list_opt: /* empty */
   74                    | block_item_list

   75 block_item_list: block_item
   76                | block_item_list block_item

   77 block_item: declaration
   78           | statement

   79 expression_statement: expression_opt ';'

   80 expression_opt: /* empty */
   81               | expression

   82 selection_statement: IF '(' expression ')' statement
   83                    | IF '(' expression ')' statement ELSE statement

   84 iteration_statement: FOR '(' expression_opt ';' expression_opt ';' expression_opt ')' statement

   85 jump_statement: RETURN expression_opt


Terminals, with rules where they appear

$end (0) 0
'!' (33) 19
'%' (37) 23
'&' (38) 15
'(' (40) 6 9 55 82 83 84
')' (41) 6 9 55 82 83 84
'*' (42) 16 21
'+' (43) 17 25
',' (44) 12 60
'-' (45) 18 26
'/' (47) 22
':' (58) 40
';' (59) 79 84
'<' (60) 28
'=' (61) 42 46
'>' (62) 29
'?' (63) 40
'[' (91) 8 54
']' (93) 8 54
'_' (95)
'{' (123) 72
'}' (125) 72
error (256)
IDENTIFIER (258) 2 10 53 54 55 64
CONSTANT (259) 3
I_CONSTANT (260) 5 54
STRLIT (261) 4
INT (262) 49
CHAR (263) 48
IF (264) 82 83
ELSE (265) 83
VOID (266) 47
RETURN (267) 85
FOR (268) 84
AND_OP (269) 36
OR_OP (270) 38
LE_OP (271) 30
GE_OP (272) 31
EQ_OP (273) 33
NE_OP (274) 34
PTR_OP (275) 10 56


Nonterminals, with rules where they appear

$accept (42)
    on left: 0
statement (43)
    on left: 1 67 68 69 70 71, on right: 0 78 82 83 84
primary_expression (44)
    on left: 2 3 4 5 6, on right: 7
postfix_expression (45)
    on left: 7 8 9 10, on right: 8 9 10 13
argument_expression_list (46)
    on left: 11 12, on right: 9 12
unary_expression (47)
    on left: 13 14, on right: 14 20 21 22 23 42
unary_operator (48)
    on left: 15 16 17 18 19, on right: 14
multiplicative_expression (49)
    on left: 20 21 22 23, on right: 21 22 23 24 25 26
additive_expression (50)
    on left: 24 25 26, on right: 25 26 27 28 29 30 31
relational_expression (51)
    on left: 27 28 29 30 31, on right: 28 29 30 31 32 33 34
equality_expression (52)
    on left: 32 33 34, on right: 33 34 35 36
logical_AND_expression (53)
    on left: 35 36, on right: 36 37 38
logical_OR_expression (54)
    on left: 37 38, on right: 38 39 40
conditional_expression (55)
    on left: 39 40, on right: 40 41
assignment_expression (56)
    on left: 41 42, on right: 11 12 42 43 66
expression (57)
    on left: 43, on right: 1 6 8 40 81 82 83
declaration (58)
    on left: 44, on right: 77
init_declarator (59)
    on left: 45 46, on right: 44
type_specifier (60)
    on left: 47 48 49, on right: 44 65
declarator (61)
    on left: 50 51, on right: 45 46
direct_declarator (62)
    on left: 52 53 54 55, on right: 50
pointer (63)
    on left: 56, on right: 58
pointer_opt (64)
    on left: 57 58, on right: 50 65
parameter_list (65)
    on left: 59 60, on right: 60 62
parameter_list_opt (66)
    on left: 61 62, on right: 55
identifier_opt (67)
    on left: 63 64, on right: 65
parameter_declaration (68)
    on left: 65, on right: 59 60
initializer (69)
    on left: 66, on right: 46
compound_statement (70)
    on left: 72, on right: 67
block_item_list_opt (71)
    on left: 73 74, on right: 72
block_item_list (72)
    on left: 75 76, on right: 74 76
block_item (73)
    on left: 77 78, on right: 75 76
expression_statement (74)
    on left: 79, on right: 68
expression_opt (75)
    on left: 80 81, on right: 79 84 85
selection_statement (76)
    on left: 82 83, on right: 69
iteration_statement (77)
    on left: 84, on right: 70
jump_statement (78)
    on left: 85, on right: 71


state 0

    0 $accept: . statement $end

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    IF          shift, and go to state 5
    RETURN      shift, and go to state 6
    FOR         shift, and go to state 7
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13
    '{'         shift, and go to state 14

    $default  reduce using rule 80 (expression_opt)

    statement                  go to state 15
    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 28
    compound_statement         go to state 29
    expression_statement       go to state 30
    expression_opt             go to state 31
    selection_statement        go to state 32
    iteration_statement        go to state 33
    jump_statement             go to state 34


state 1

    2 primary_expression: IDENTIFIER .

    $default  reduce using rule 2 (primary_expression)


state 2

    3 primary_expression: CONSTANT .

    $default  reduce using rule 3 (primary_expression)


state 3

    5 primary_expression: I_CONSTANT .

    $default  reduce using rule 5 (primary_expression)


state 4

    4 primary_expression: STRLIT .

    $default  reduce using rule 4 (primary_expression)


state 5

   82 selection_statement: IF . '(' expression ')' statement
   83                    | IF . '(' expression ')' statement ELSE statement

    '('  shift, and go to state 35


state 6

   85 jump_statement: RETURN . expression_opt

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    IDENTIFIER  [reduce using rule 80 (expression_opt)]
    CONSTANT    [reduce using rule 80 (expression_opt)]
    I_CONSTANT  [reduce using rule 80 (expression_opt)]
    STRLIT      [reduce using rule 80 (expression_opt)]
    '-'         [reduce using rule 80 (expression_opt)]
    '+'         [reduce using rule 80 (expression_opt)]
    '('         [reduce using rule 80 (expression_opt)]
    '&'         [reduce using rule 80 (expression_opt)]
    '*'         [reduce using rule 80 (expression_opt)]
    '!'         [reduce using rule 80 (expression_opt)]
    $default    reduce using rule 80 (expression_opt)

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 36
    expression_opt             go to state 37


state 7

   84 iteration_statement: FOR . '(' expression_opt ';' expression_opt ';' expression_opt ')' statement

    '('  shift, and go to state 38


state 8

   18 unary_operator: '-' .

    $default  reduce using rule 18 (unary_operator)


state 9

   17 unary_operator: '+' .

    $default  reduce using rule 17 (unary_operator)


state 10

    6 primary_expression: '(' . expression ')'

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 39


state 11

   15 unary_operator: '&' .

    $default  reduce using rule 15 (unary_operator)


state 12

   16 unary_operator: '*' .

    $default  reduce using rule 16 (unary_operator)


state 13

   19 unary_operator: '!' .

    $default  reduce using rule 19 (unary_operator)


state 14

   72 compound_statement: '{' . block_item_list_opt '}'

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    INT         shift, and go to state 40
    CHAR        shift, and go to state 41
    IF          shift, and go to state 5
    VOID        shift, and go to state 42
    RETURN      shift, and go to state 6
    FOR         shift, and go to state 7
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13
    '{'         shift, and go to state 14

    ';'       reduce using rule 80 (expression_opt)
    $default  reduce using rule 73 (block_item_list_opt)

    statement                  go to state 43
    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 28
    declaration                go to state 44
    type_specifier             go to state 45
    compound_statement         go to state 29
    block_item_list_opt        go to state 46
    block_item_list            go to state 47
    block_item                 go to state 48
    expression_statement       go to state 30
    expression_opt             go to state 31
    selection_statement        go to state 32
    iteration_statement        go to state 33
    jump_statement             go to state 34


state 15

    0 $accept: statement . $end

    $end  shift, and go to state 49


state 16

    7 postfix_expression: primary_expression .

    $default  reduce using rule 7 (postfix_expression)


state 17

    8 postfix_expression: postfix_expression . '[' expression ']'
    9                   | postfix_expression . '(' argument_expression_list ')'
   10                   | postfix_expression . PTR_OP IDENTIFIER
   13 unary_expression: postfix_expression .

    PTR_OP  shift, and go to state 50
    '('     shift, and go to state 51
    '['     shift, and go to state 52

    '('       [reduce using rule 13 (unary_expression)]
    $default  reduce using rule 13 (unary_expression)


state 18

   20 multiplicative_expression: unary_expression .
   42 assignment_expression: unary_expression . '=' assignment_expression

    '='  shift, and go to state 53

    $default  reduce using rule 20 (multiplicative_expression)


state 19

   14 unary_expression: unary_operator . unary_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression  go to state 16
    postfix_expression  go to state 17
    unary_expression    go to state 54
    unary_operator      go to state 19


state 20

   21 multiplicative_expression: multiplicative_expression . '*' unary_expression
   22                          | multiplicative_expression . '/' unary_expression
   23                          | multiplicative_expression . '%' unary_expression
   24 additive_expression: multiplicative_expression .

    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    '*'       [reduce using rule 24 (additive_expression)]
    $default  reduce using rule 24 (additive_expression)


state 21

   25 additive_expression: additive_expression . '+' multiplicative_expression
   26                    | additive_expression . '-' multiplicative_expression
   27 relational_expression: additive_expression .

    '-'  shift, and go to state 58
    '+'  shift, and go to state 59

    '-'       [reduce using rule 27 (relational_expression)]
    '+'       [reduce using rule 27 (relational_expression)]
    $default  reduce using rule 27 (relational_expression)


state 22

   28 relational_expression: relational_expression . '<' additive_expression
   29                      | relational_expression . '>' additive_expression
   30                      | relational_expression . LE_OP additive_expression
   31                      | relational_expression . GE_OP additive_expression
   32 equality_expression: relational_expression .

    LE_OP  shift, and go to state 60
    GE_OP  shift, and go to state 61
    '<'    shift, and go to state 62
    '>'    shift, and go to state 63

    $default  reduce using rule 32 (equality_expression)


state 23

   33 equality_expression: equality_expression . EQ_OP relational_expression
   34                    | equality_expression . NE_OP relational_expression
   35 logical_AND_expression: equality_expression .

    EQ_OP  shift, and go to state 64
    NE_OP  shift, and go to state 65

    $default  reduce using rule 35 (logical_AND_expression)


state 24

   36 logical_AND_expression: logical_AND_expression . AND_OP equality_expression
   37 logical_OR_expression: logical_AND_expression .

    AND_OP  shift, and go to state 66

    $default  reduce using rule 37 (logical_OR_expression)


state 25

   38 logical_OR_expression: logical_OR_expression . OR_OP logical_AND_expression
   39 conditional_expression: logical_OR_expression .
   40                       | logical_OR_expression . '?' expression ':' conditional_expression

    OR_OP  shift, and go to state 67
    '?'    shift, and go to state 68

    $default  reduce using rule 39 (conditional_expression)


state 26

   41 assignment_expression: conditional_expression .

    $default  reduce using rule 41 (assignment_expression)


state 27

   43 expression: assignment_expression .

    $default  reduce using rule 43 (expression)


state 28

    1 statement: expression .
   81 expression_opt: expression .

    ';'       reduce using rule 1 (statement)
    ';'       [reduce using rule 81 (expression_opt)]
    $default  reduce using rule 1 (statement)


state 29

   67 statement: compound_statement .

    $default  reduce using rule 67 (statement)


state 30

   68 statement: expression_statement .

    $default  reduce using rule 68 (statement)


state 31

   79 expression_statement: expression_opt . ';'

    ';'  shift, and go to state 69


state 32

   69 statement: selection_statement .

    $default  reduce using rule 69 (statement)


state 33

   70 statement: iteration_statement .

    $default  reduce using rule 70 (statement)


state 34

   71 statement: jump_statement .

    $default  reduce using rule 71 (statement)


state 35

   82 selection_statement: IF '(' . expression ')' statement
   83                    | IF '(' . expression ')' statement ELSE statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 70


state 36

   81 expression_opt: expression .

    $default  reduce using rule 81 (expression_opt)


state 37

   85 jump_statement: RETURN expression_opt .

    $default  reduce using rule 85 (jump_statement)


state 38

   84 iteration_statement: FOR '(' . expression_opt ';' expression_opt ';' expression_opt ')' statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    $default  reduce using rule 80 (expression_opt)

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 36
    expression_opt             go to state 71


state 39

    6 primary_expression: '(' expression . ')'

    ')'  shift, and go to state 72


state 40

   49 type_specifier: INT .

    $default  reduce using rule 49 (type_specifier)


state 41

   48 type_specifier: CHAR .

    $default  reduce using rule 48 (type_specifier)


state 42

   47 type_specifier: VOID .

    $default  reduce using rule 47 (type_specifier)


state 43

   78 block_item: statement .

    $default  reduce using rule 78 (block_item)


state 44

   77 block_item: declaration .

    $default  reduce using rule 77 (block_item)


state 45

   44 declaration: type_specifier . init_declarator

    PTR_OP  shift, and go to state 73

    IDENTIFIER  reduce using rule 51 (declarator)
    IDENTIFIER  [reduce using rule 57 (pointer_opt)]
    CONSTANT    reduce using rule 51 (declarator)
    CONSTANT    [reduce using rule 57 (pointer_opt)]
    I_CONSTANT  reduce using rule 51 (declarator)
    I_CONSTANT  [reduce using rule 57 (pointer_opt)]
    STRLIT      reduce using rule 51 (declarator)
    STRLIT      [reduce using rule 57 (pointer_opt)]
    INT         reduce using rule 51 (declarator)
    INT         [reduce using rule 57 (pointer_opt)]
    CHAR        reduce using rule 51 (declarator)
    CHAR        [reduce using rule 57 (pointer_opt)]
    IF          reduce using rule 51 (declarator)
    IF          [reduce using rule 57 (pointer_opt)]
    VOID        reduce using rule 51 (declarator)
    VOID        [reduce using rule 57 (pointer_opt)]
    RETURN      reduce using rule 51 (declarator)
    RETURN      [reduce using rule 57 (pointer_opt)]
    FOR         reduce using rule 51 (declarator)
    FOR         [reduce using rule 57 (pointer_opt)]
    '-'         reduce using rule 51 (declarator)
    '-'         [reduce using rule 57 (pointer_opt)]
    '+'         reduce using rule 51 (declarator)
    '+'         [reduce using rule 57 (pointer_opt)]
    '('         reduce using rule 51 (declarator)
    '('         [reduce using rule 57 (pointer_opt)]
    '&'         reduce using rule 51 (declarator)
    '&'         [reduce using rule 57 (pointer_opt)]
    '*'         reduce using rule 51 (declarator)
    '*'         [reduce using rule 57 (pointer_opt)]
    '!'         reduce using rule 51 (declarator)
    '!'         [reduce using rule 57 (pointer_opt)]
    '='         reduce using rule 51 (declarator)
    '='         [reduce using rule 57 (pointer_opt)]
    '{'         reduce using rule 51 (declarator)
    '{'         [reduce using rule 57 (pointer_opt)]
    '}'         reduce using rule 51 (declarator)
    '}'         [reduce using rule 57 (pointer_opt)]
    ';'         reduce using rule 51 (declarator)
    ';'         [reduce using rule 57 (pointer_opt)]
    $default    reduce using rule 51 (declarator)

    init_declarator  go to state 74
    declarator       go to state 75
    pointer          go to state 76
    pointer_opt      go to state 77


state 46

   72 compound_statement: '{' block_item_list_opt . '}'

    '}'  shift, and go to state 78


state 47

   74 block_item_list_opt: block_item_list .
   76 block_item_list: block_item_list . block_item

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    INT         shift, and go to state 40
    CHAR        shift, and go to state 41
    IF          shift, and go to state 5
    VOID        shift, and go to state 42
    RETURN      shift, and go to state 6
    FOR         shift, and go to state 7
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13
    '{'         shift, and go to state 14

    ';'       reduce using rule 80 (expression_opt)
    $default  reduce using rule 74 (block_item_list_opt)

    statement                  go to state 43
    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 28
    declaration                go to state 44
    type_specifier             go to state 45
    compound_statement         go to state 29
    block_item                 go to state 79
    expression_statement       go to state 30
    expression_opt             go to state 31
    selection_statement        go to state 32
    iteration_statement        go to state 33
    jump_statement             go to state 34


state 48

   75 block_item_list: block_item .

    $default  reduce using rule 75 (block_item_list)


state 49

    0 $accept: statement $end .

    $default  accept


state 50

   10 postfix_expression: postfix_expression PTR_OP . IDENTIFIER

    IDENTIFIER  shift, and go to state 80


state 51

    9 postfix_expression: postfix_expression '(' . argument_expression_list ')'

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    argument_expression_list   go to state 81
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 82


state 52

    8 postfix_expression: postfix_expression '[' . expression ']'

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 83


state 53

   42 assignment_expression: unary_expression '=' . assignment_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 84


state 54

   14 unary_expression: unary_operator unary_expression .

    $default  reduce using rule 14 (unary_expression)


state 55

   21 multiplicative_expression: multiplicative_expression '*' . unary_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression  go to state 16
    postfix_expression  go to state 17
    unary_expression    go to state 85
    unary_operator      go to state 19


state 56

   22 multiplicative_expression: multiplicative_expression '/' . unary_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression  go to state 16
    postfix_expression  go to state 17
    unary_expression    go to state 86
    unary_operator      go to state 19


state 57

   23 multiplicative_expression: multiplicative_expression '%' . unary_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression  go to state 16
    postfix_expression  go to state 17
    unary_expression    go to state 87
    unary_operator      go to state 19


state 58

   26 additive_expression: additive_expression '-' . multiplicative_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 89


state 59

   25 additive_expression: additive_expression '+' . multiplicative_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 90


state 60

   30 relational_expression: relational_expression LE_OP . additive_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 91


state 61

   31 relational_expression: relational_expression GE_OP . additive_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 92


state 62

   28 relational_expression: relational_expression '<' . additive_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 93


state 63

   29 relational_expression: relational_expression '>' . additive_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 94


state 64

   33 equality_expression: equality_expression EQ_OP . relational_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 95


state 65

   34 equality_expression: equality_expression NE_OP . relational_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 96


state 66

   36 logical_AND_expression: logical_AND_expression AND_OP . equality_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 97


state 67

   38 logical_OR_expression: logical_OR_expression OR_OP . logical_AND_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 98


state 68

   40 conditional_expression: logical_OR_expression '?' . expression ':' conditional_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 99


state 69

   79 expression_statement: expression_opt ';' .

    $default  reduce using rule 79 (expression_statement)


state 70

   82 selection_statement: IF '(' expression . ')' statement
   83                    | IF '(' expression . ')' statement ELSE statement

    ')'  shift, and go to state 100


state 71

   84 iteration_statement: FOR '(' expression_opt . ';' expression_opt ';' expression_opt ')' statement

    ';'  shift, and go to state 101


state 72

    6 primary_expression: '(' expression ')' .

    $default  reduce using rule 6 (primary_expression)


state 73

   56 pointer: PTR_OP .

    $default  reduce using rule 56 (pointer)


state 74

   44 declaration: type_specifier init_declarator .

    $default  reduce using rule 44 (declaration)


state 75

   45 init_declarator: declarator .
   46                | declarator . '=' initializer

    '='  shift, and go to state 102

    $default  reduce using rule 45 (init_declarator)


state 76

   58 pointer_opt: pointer .

    $default  reduce using rule 58 (pointer_opt)


state 77

   50 declarator: pointer_opt . direct_declarator

    IDENTIFIER  shift, and go to state 103

    IDENTIFIER  [reduce using rule 52 (direct_declarator)]
    $default    reduce using rule 52 (direct_declarator)

    direct_declarator  go to state 104


state 78

   72 compound_statement: '{' block_item_list_opt '}' .

    $default  reduce using rule 72 (compound_statement)


state 79

   76 block_item_list: block_item_list block_item .

    $default  reduce using rule 76 (block_item_list)


state 80

   10 postfix_expression: postfix_expression PTR_OP IDENTIFIER .

    $default  reduce using rule 10 (postfix_expression)


state 81

    9 postfix_expression: postfix_expression '(' argument_expression_list . ')'
   12 argument_expression_list: argument_expression_list . ',' assignment_expression

    ')'  shift, and go to state 105
    ','  shift, and go to state 106


state 82

   11 argument_expression_list: assignment_expression .

    $default  reduce using rule 11 (argument_expression_list)


state 83

    8 postfix_expression: postfix_expression '[' expression . ']'

    ']'  shift, and go to state 107


state 84

   42 assignment_expression: unary_expression '=' assignment_expression .

    $default  reduce using rule 42 (assignment_expression)


state 85

   21 multiplicative_expression: multiplicative_expression '*' unary_expression .

    $default  reduce using rule 21 (multiplicative_expression)


state 86

   22 multiplicative_expression: multiplicative_expression '/' unary_expression .

    $default  reduce using rule 22 (multiplicative_expression)


state 87

   23 multiplicative_expression: multiplicative_expression '%' unary_expression .

    $default  reduce using rule 23 (multiplicative_expression)


state 88

   20 multiplicative_expression: unary_expression .

    $default  reduce using rule 20 (multiplicative_expression)


state 89

   21 multiplicative_expression: multiplicative_expression . '*' unary_expression
   22                          | multiplicative_expression . '/' unary_expression
   23                          | multiplicative_expression . '%' unary_expression
   26 additive_expression: additive_expression '-' multiplicative_expression .

    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    '*'       [reduce using rule 26 (additive_expression)]
    $default  reduce using rule 26 (additive_expression)


state 90

   21 multiplicative_expression: multiplicative_expression . '*' unary_expression
   22                          | multiplicative_expression . '/' unary_expression
   23                          | multiplicative_expression . '%' unary_expression
   25 additive_expression: additive_expression '+' multiplicative_expression .

    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '%'  shift, and go to state 57

    '*'       [reduce using rule 25 (additive_expression)]
    $default  reduce using rule 25 (additive_expression)


state 91

   25 additive_expression: additive_expression . '+' multiplicative_expression
   26                    | additive_expression . '-' multiplicative_expression
   30 relational_expression: relational_expression LE_OP additive_expression .

    '-'  shift, and go to state 58
    '+'  shift, and go to state 59

    '-'       [reduce using rule 30 (relational_expression)]
    '+'       [reduce using rule 30 (relational_expression)]
    $default  reduce using rule 30 (relational_expression)


state 92

   25 additive_expression: additive_expression . '+' multiplicative_expression
   26                    | additive_expression . '-' multiplicative_expression
   31 relational_expression: relational_expression GE_OP additive_expression .

    '-'  shift, and go to state 58
    '+'  shift, and go to state 59

    '-'       [reduce using rule 31 (relational_expression)]
    '+'       [reduce using rule 31 (relational_expression)]
    $default  reduce using rule 31 (relational_expression)


state 93

   25 additive_expression: additive_expression . '+' multiplicative_expression
   26                    | additive_expression . '-' multiplicative_expression
   28 relational_expression: relational_expression '<' additive_expression .

    '-'  shift, and go to state 58
    '+'  shift, and go to state 59

    '-'       [reduce using rule 28 (relational_expression)]
    '+'       [reduce using rule 28 (relational_expression)]
    $default  reduce using rule 28 (relational_expression)


state 94

   25 additive_expression: additive_expression . '+' multiplicative_expression
   26                    | additive_expression . '-' multiplicative_expression
   29 relational_expression: relational_expression '>' additive_expression .

    '-'  shift, and go to state 58
    '+'  shift, and go to state 59

    '-'       [reduce using rule 29 (relational_expression)]
    '+'       [reduce using rule 29 (relational_expression)]
    $default  reduce using rule 29 (relational_expression)


state 95

   28 relational_expression: relational_expression . '<' additive_expression
   29                      | relational_expression . '>' additive_expression
   30                      | relational_expression . LE_OP additive_expression
   31                      | relational_expression . GE_OP additive_expression
   33 equality_expression: equality_expression EQ_OP relational_expression .

    LE_OP  shift, and go to state 60
    GE_OP  shift, and go to state 61
    '<'    shift, and go to state 62
    '>'    shift, and go to state 63

    $default  reduce using rule 33 (equality_expression)


state 96

   28 relational_expression: relational_expression . '<' additive_expression
   29                      | relational_expression . '>' additive_expression
   30                      | relational_expression . LE_OP additive_expression
   31                      | relational_expression . GE_OP additive_expression
   34 equality_expression: equality_expression NE_OP relational_expression .

    LE_OP  shift, and go to state 60
    GE_OP  shift, and go to state 61
    '<'    shift, and go to state 62
    '>'    shift, and go to state 63

    $default  reduce using rule 34 (equality_expression)


state 97

   33 equality_expression: equality_expression . EQ_OP relational_expression
   34                    | equality_expression . NE_OP relational_expression
   36 logical_AND_expression: logical_AND_expression AND_OP equality_expression .

    EQ_OP  shift, and go to state 64
    NE_OP  shift, and go to state 65

    $default  reduce using rule 36 (logical_AND_expression)


state 98

   36 logical_AND_expression: logical_AND_expression . AND_OP equality_expression
   38 logical_OR_expression: logical_OR_expression OR_OP logical_AND_expression .

    AND_OP  shift, and go to state 66

    $default  reduce using rule 38 (logical_OR_expression)


state 99

   40 conditional_expression: logical_OR_expression '?' expression . ':' conditional_expression

    ':'  shift, and go to state 108


state 100

   82 selection_statement: IF '(' expression ')' . statement
   83                    | IF '(' expression ')' . statement ELSE statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    IF          shift, and go to state 5
    RETURN      shift, and go to state 6
    FOR         shift, and go to state 7
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13
    '{'         shift, and go to state 14

    $default  reduce using rule 80 (expression_opt)

    statement                  go to state 109
    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 28
    compound_statement         go to state 29
    expression_statement       go to state 30
    expression_opt             go to state 31
    selection_statement        go to state 32
    iteration_statement        go to state 33
    jump_statement             go to state 34


state 101

   84 iteration_statement: FOR '(' expression_opt ';' . expression_opt ';' expression_opt ')' statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    $default  reduce using rule 80 (expression_opt)

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 36
    expression_opt             go to state 110


state 102

   46 init_declarator: declarator '=' . initializer

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 111
    initializer                go to state 112


state 103

   53 direct_declarator: IDENTIFIER .
   54                  | IDENTIFIER . '[' I_CONSTANT ']'
   55                  | IDENTIFIER . '(' parameter_list_opt ')'

    '('  shift, and go to state 113
    '['  shift, and go to state 114

    '('       [reduce using rule 53 (direct_declarator)]
    $default  reduce using rule 53 (direct_declarator)


state 104

   50 declarator: pointer_opt direct_declarator .

    $default  reduce using rule 50 (declarator)


state 105

    9 postfix_expression: postfix_expression '(' argument_expression_list ')' .

    $default  reduce using rule 9 (postfix_expression)


state 106

   12 argument_expression_list: argument_expression_list ',' . assignment_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 115


state 107

    8 postfix_expression: postfix_expression '[' expression ']' .

    $default  reduce using rule 8 (postfix_expression)


state 108

   40 conditional_expression: logical_OR_expression '?' expression ':' . conditional_expression

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 88
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 116


state 109

   82 selection_statement: IF '(' expression ')' statement .
   83                    | IF '(' expression ')' statement . ELSE statement

    ELSE  shift, and go to state 117

    ELSE      [reduce using rule 82 (selection_statement)]
    $default  reduce using rule 82 (selection_statement)


state 110

   84 iteration_statement: FOR '(' expression_opt ';' expression_opt . ';' expression_opt ')' statement

    ';'  shift, and go to state 118


state 111

   66 initializer: assignment_expression .

    $default  reduce using rule 66 (initializer)


state 112

   46 init_declarator: declarator '=' initializer .

    $default  reduce using rule 46 (init_declarator)


state 113

   55 direct_declarator: IDENTIFIER '(' . parameter_list_opt ')'

    INT   shift, and go to state 40
    CHAR  shift, and go to state 41
    VOID  shift, and go to state 42

    $default  reduce using rule 61 (parameter_list_opt)

    type_specifier         go to state 119
    parameter_list         go to state 120
    parameter_list_opt     go to state 121
    parameter_declaration  go to state 122


state 114

   54 direct_declarator: IDENTIFIER '[' . I_CONSTANT ']'

    I_CONSTANT  shift, and go to state 123


state 115

   12 argument_expression_list: argument_expression_list ',' assignment_expression .

    $default  reduce using rule 12 (argument_expression_list)


state 116

   40 conditional_expression: logical_OR_expression '?' expression ':' conditional_expression .

    $default  reduce using rule 40 (conditional_expression)


state 117

   83 selection_statement: IF '(' expression ')' statement ELSE . statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    IF          shift, and go to state 5
    RETURN      shift, and go to state 6
    FOR         shift, and go to state 7
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13
    '{'         shift, and go to state 14

    $default  reduce using rule 80 (expression_opt)

    statement                  go to state 124
    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 28
    compound_statement         go to state 29
    expression_statement       go to state 30
    expression_opt             go to state 31
    selection_statement        go to state 32
    iteration_statement        go to state 33
    jump_statement             go to state 34


state 118

   84 iteration_statement: FOR '(' expression_opt ';' expression_opt ';' . expression_opt ')' statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13

    $default  reduce using rule 80 (expression_opt)

    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 36
    expression_opt             go to state 125


state 119

   65 parameter_declaration: type_specifier . pointer_opt identifier_opt

    PTR_OP  shift, and go to state 73

    $default  reduce using rule 57 (pointer_opt)

    pointer      go to state 76
    pointer_opt  go to state 126


state 120

   60 parameter_list: parameter_list . ',' parameter_declaration
   62 parameter_list_opt: parameter_list .

    ','  shift, and go to state 127

    $default  reduce using rule 62 (parameter_list_opt)


state 121

   55 direct_declarator: IDENTIFIER '(' parameter_list_opt . ')'

    ')'  shift, and go to state 128


state 122

   59 parameter_list: parameter_declaration .

    $default  reduce using rule 59 (parameter_list)


state 123

   54 direct_declarator: IDENTIFIER '[' I_CONSTANT . ']'

    ']'  shift, and go to state 129


state 124

   83 selection_statement: IF '(' expression ')' statement ELSE statement .

    $default  reduce using rule 83 (selection_statement)


state 125

   84 iteration_statement: FOR '(' expression_opt ';' expression_opt ';' expression_opt . ')' statement

    ')'  shift, and go to state 130


state 126

   65 parameter_declaration: type_specifier pointer_opt . identifier_opt

    IDENTIFIER  shift, and go to state 131

    $default  reduce using rule 63 (identifier_opt)

    identifier_opt  go to state 132


state 127

   60 parameter_list: parameter_list ',' . parameter_declaration

    INT   shift, and go to state 40
    CHAR  shift, and go to state 41
    VOID  shift, and go to state 42

    type_specifier         go to state 119
    parameter_declaration  go to state 133


state 128

   55 direct_declarator: IDENTIFIER '(' parameter_list_opt ')' .

    $default  reduce using rule 55 (direct_declarator)


state 129

   54 direct_declarator: IDENTIFIER '[' I_CONSTANT ']' .

    $default  reduce using rule 54 (direct_declarator)


state 130

   84 iteration_statement: FOR '(' expression_opt ';' expression_opt ';' expression_opt ')' . statement

    IDENTIFIER  shift, and go to state 1
    CONSTANT    shift, and go to state 2
    I_CONSTANT  shift, and go to state 3
    STRLIT      shift, and go to state 4
    IF          shift, and go to state 5
    RETURN      shift, and go to state 6
    FOR         shift, and go to state 7
    '-'         shift, and go to state 8
    '+'         shift, and go to state 9
    '('         shift, and go to state 10
    '&'         shift, and go to state 11
    '*'         shift, and go to state 12
    '!'         shift, and go to state 13
    '{'         shift, and go to state 14

    $default  reduce using rule 80 (expression_opt)

    statement                  go to state 134
    primary_expression         go to state 16
    postfix_expression         go to state 17
    unary_expression           go to state 18
    unary_operator             go to state 19
    multiplicative_expression  go to state 20
    additive_expression        go to state 21
    relational_expression      go to state 22
    equality_expression        go to state 23
    logical_AND_expression     go to state 24
    logical_OR_expression      go to state 25
    conditional_expression     go to state 26
    assignment_expression      go to state 27
    expression                 go to state 28
    compound_statement         go to state 29
    expression_statement       go to state 30
    expression_opt             go to state 31
    selection_statement        go to state 32
    iteration_statement        go to state 33
    jump_statement             go to state 34


state 131

   64 identifier_opt: IDENTIFIER .

    $default  reduce using rule 64 (identifier_opt)


state 132

   65 parameter_declaration: type_specifier pointer_opt identifier_opt .

    $default  reduce using rule 65 (parameter_declaration)


state 133

   60 parameter_list: parameter_list ',' parameter_declaration .

    $default  reduce using rule 60 (parameter_list)


state 134

   84 iteration_statement: FOR '(' expression_opt ';' expression_opt ';' expression_opt ')' statement .

    $default  reduce using rule 84 (iteration_statement)
